Test Case for module `1-my_list`
==============================

Test Case for class `MyList`:
---------------------------

Test 0: Importing the class:
     >>> MyList = __import__('1-my_list').MyList

Normal Test Case:
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>>


Test 2: For when a positive integer is appended:
     >>> my_list = MyList()
     >>> my_list.append(1)

Test 3: When multiple integers are appended (positive, negative and zero):
     >>> my_list.append(2)
     >>> my_list.append(-3)
     >>> my_list.append(0)

Test 4: When a string is appended and print:
     >>> my_list.append("Eric")
     >>> print(my_list)
     [1, 2, -3, 0, 'Eric']

Test 5: When a list is appended and print:
     >>> my_list.append([2, 3])
     >>> print(my_list)
     [1, 2, -3, 0, 'Eric', [2, 3]]

Test 6: For when no value is passed to appended
     >>> my_list.append()
     Traceback (most recent call last):
     ...
     TypeError: append() takes exactly one argument (0 given)

Test 7: Testing pop module:
     >>> my_list.pop()
     [2, 3]
     >>> print(my_list)
     [1, 2, -3, 0, 'Eric']

Test 8: Test for appending other datatypes:
     >>> my_list.append({'pay_1': 400})
     >>> my_list.append((2, 3))
     >>> my_list.append(4.56)
     >>> my_list.append(True)
     >>> print(my_list)
     [1, 2, -3, 0, 'Eric', {'pay_1': 400}, (2, 3), 4.56, True]



Test Cases for function `print_sorted(self)`:

Test 1: Test if a list with mixed datatypes passed is sorted:
      >>> my_list.print_sorted()
      Traceback (most recent call last):
      ...
      TypeError: '<' not supported between instances of 'str' and 'int'


Test 2: Test for numeric sorted list:
     >>> my_list = MyList()
     >>> my_list.append(1)
     >>> my_list.append(4)
     >>> my_list.append(2)
     >>> my_list.append(3)
     >>> my_list.append(5)
     >>> print(my_list)
     [1, 4, 2, 3, 5]
     >>> my_list.print_sorted()
     [1, 2, 3, 4, 5]
     >>> print(my_list)
     [1, 4, 2, 3, 5]
